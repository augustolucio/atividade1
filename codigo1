#include<stdio.h>
#include<ctime>
#define MAX 50

struct Data {
    int dia, mes, ano;

    Data() {
    }

    Data(int d, int m, int a) {
        dia = d;
        mes = m;
        ano = a;
    }

    void ler() {
        scanf("%d/%d/%d%*c", &dia, &mes, &ano);
    }

    void imprimir() {
        printf("%02d/%02d/%04d\n", dia, mes, ano);
    }

    int calcularIdade() {
        std::time_t tempoAtual = std::time(0);
        std::tm* agora = std::localtime(&tempoAtual);
        Data hoje(agora->tm_mday,
                  agora->tm_mon + 1,
                  agora->tm_year + 1900);
        if (mes < hoje.mes || (mes == hoje.mes && dia <= hoje.dia)) {
            return hoje.ano - ano;
        } else {
            return (hoje.ano - ano) - 1;
        }
    }
};

struct Cliente {
    char nome[100];
    Data nascimento;
    char genero;
    int idade;

    void ler() {
        scanf("%[^\n]%*c", nome);
        nascimento.ler();
        scanf("%c%*c", &genero);
        idade = nascimento.calcularIdade();
    }

    void imprimir() {
        printf("%s\n", nome);
        nascimento.imprimir();
        printf("%c\n", genero);
        printf("%d\n", idade);
    }
};

int main() {
    Cliente clientes[MAX];
    int contador = 0, opcao;
    do {
        printf("1. Ler\n2. Listar\n");
        scanf("%d%*c", &opcao);

        if (opcao == 1) {
            if (contador >= MAX) {
                printf("Capacidade m√°xima atingida\n");
            } else {
                clientes[contador++].ler();
            }
        } else if (opcao == 2) {
            for (int i = 0; i < contador; i++) {
                clientes[i].imprimir();
            }
        }
    } while (opcao == 1 || opcao == 2);

    return 0;
}
